// Mneumonics as the lexer sees them. Parser gets its own set of info for them.
module jupiter.assembler.info;

import std;

Mneumonic[string] g_highMneumonics;
Register[string] g_registers;
SizeType[string] g_sizeTypes;

shared static this()
{
    static foreach(member; __traits(allMembers, Mneumonic))
        g_highMneumonics[member] = mixin("Mneumonic."~member);
    static foreach(reg; Registers)
        g_registers[reg.name] = reg;
    g_sizeTypes = [
        "byte":     SizeType.s8,
        "word":     SizeType.s16,
        "dword":    SizeType.s32,
        "qword":    SizeType.s64,
    ];
}

enum SizeType
{
    infer,
    s8 = 1,
    s16 = 2,
    s32 = 4,
    s64 = 8
}

struct Register
{
    enum Category
    {
        rax,
        rcx,
        rdx,
        rbx,
        rsp,
        rbp,
        rsi,
        rdi,
        r8,
        r9,
        r10,
        r11,
        r12,
        r13,
        r14,
        r15
    }

    string name;
    SizeType size;
    Category cat;
    ubyte regNum;
}

enum Prefix
{
    none,
    lock,
    rep,
    repnz
}

enum G2Prefix
{
    none,
    cs = 0x2E,
    ss = 0x36,
    ds = 0x3E,
    es = 0x26,
    fs = 0x64,
    gs = 0x65,
}

enum G3Prefix
{
    none,
    opSize = 0x66
}

enum G4Prefix
{
    none,
    addrSize = 0x67
}

private alias pg1 = Prefix;
private alias pg2 = G2Prefix;
private alias pg3 = G3Prefix;
private alias pg4 = G4Prefix;

private alias rc = Register.Category;
private alias st = SizeType;
private alias r = Register;
immutable Registers = [
    r("rax",    st.s64, rc.rax, 0), r("eax",    st.s32, rc.rax, 0), r("ax",     st.s16, rc.rax, 0), r("ah",     st.s8, rc.rax, 0), r("al", st.s8, rc.rax, 0),
    r("rbx",    st.s64, rc.rbx, 3), r("ebx",    st.s32, rc.rbx, 3), r("bx",     st.s16, rc.rbx, 3), r("bh",     st.s8, rc.rbx, 3), r("bl", st.s8, rc.rbx, 3),
    r("rcx",    st.s64, rc.rcx, 1), r("ecx",    st.s32, rc.rcx, 1), r("cx",     st.s16, rc.rcx, 1), r("ch",     st.s8, rc.rcx, 1), r("cl", st.s8, rc.rcx, 1),
    r("rdx",    st.s64, rc.rdx, 2), r("edx",    st.s32, rc.rdx, 2), r("dx",     st.s16, rc.rdx, 2), r("dh",     st.s8, rc.rdx, 2), r("dl", st.s8, rc.rdx, 2),
    r("rsi",    st.s64, rc.rsi, 6), r("esi",    st.s32, rc.rsi, 6), r("si",     st.s16, rc.rsi, 6), r("sil",    st.s8, rc.rsi, 6),
    r("rdi",    st.s64, rc.rdi, 7), r("edi",    st.s32, rc.rdi, 7), r("di",     st.s16, rc.rdi, 7), r("dil",    st.s8, rc.rdi, 7),
    r("rsp",    st.s64, rc.rsp, 4), r("esp",    st.s32, rc.rsp, 4), r("sp",     st.s16, rc.rsp, 4), r("spl",    st.s8, rc.rsp, 4),
    r("rbp",    st.s64, rc.rbp, 5), r("ebp",    st.s32, rc.rbp, 5), r("bp",     st.s16, rc.rbp, 5), r("bpl",    st.s8, rc.rbp, 5),
    r("r8",     st.s64, rc.r8,  0), r("r8d",    st.s32, rc.r8,  0), r("r8w",    st.s16, rc.r8,  0), r("r8b",    st.s8, rc.r8,  0),
    r("r9",     st.s64, rc.r9,  1), r("r9d",    st.s32, rc.r9,  1), r("r9w",    st.s16, rc.r9,  1), r("r9b",    st.s8, rc.r9,  1),
    r("r10",    st.s64, rc.r10, 2), r("r10d",   st.s32, rc.r10, 2), r("r10w",   st.s16, rc.r10, 2), r("r10b",   st.s8, rc.r10, 2),
    r("r11",    st.s64, rc.r11, 3), r("r11d",   st.s32, rc.r11, 3), r("r11w",   st.s16, rc.r11, 3), r("r11b",   st.s8, rc.r11, 3),
    r("r12",    st.s64, rc.r12, 4), r("r12d",   st.s32, rc.r12, 4), r("r12w",   st.s16, rc.r12, 4), r("r12b",   st.s8, rc.r12, 4),
    r("r13",    st.s64, rc.r13, 5), r("r13d",   st.s32, rc.r13, 5), r("r13w",   st.s16, rc.r13, 5), r("r13b",   st.s8, rc.r13, 5),
    r("r14",    st.s64, rc.r14, 6), r("r14d",   st.s32, rc.r14, 6), r("r14w",   st.s16, rc.r14, 6), r("r14b",   st.s8, rc.r14, 6),
    r("r15",    st.s64, rc.r15, 7), r("r15d",   st.s32, rc.r15, 7), r("r15w",   st.s16, rc.r15, 7), r("r15b",   st.s8, rc.r15, 7),
];

struct Instruction
{
    enum OperandType
    {
        none,
        label   = 1 << 0,
        r       = 1 << 1,
        imm     = 1 << 2,
        mem     = 1 << 3,
        rm      = r | mem
    }

    enum OperandEncoding
    {
        none,
        rm_rm,
        rm_reg,
        imm,
        add
    }

    enum Rex : ubyte
    {
        none,
        w = 1 << 3,
        r = 1 << 2,
        x = 1 << 1,
        b = 1 << 0,
    }

    enum RegType
    {
        reg0 = 0,
        reg1 = 1,
        reg2 = 2,
        reg3 = 3,
        reg4 = 4,
        reg5 = 5,
        reg6 = 6,
        reg7 = 7,
        r    = -1,
    }

    enum Flags
    {
        none
    }

    Mneumonic mneumonic;
    string name;
    G2Prefix p_g2;
    G3Prefix p_g3;
    G4Prefix p_g4;
    Rex rex;
    RegType reg_t;
    ubyte[] op;
    OperandType[3] op_t;
    SizeType[3] op_s;
    OperandEncoding[3] op_e;
    Flags flags;

    string toString() const
    {
        return this.name;
    }
}

private alias i = Instruction;
private alias ot = i.OperandType;
private alias oe = i.OperandEncoding;
private alias rex = i.Rex;
private alias reg = i.RegType;
private alias f = i.Flags;
private alias m = Mneumonic;
immutable INSTRUCTIONS = [
    i(m.add, "addrm32i32", pg2.none, pg3.none, pg4.none, rex.none, reg.reg0, [0x81], [ot.rm, ot.imm, ot.none], [st.s32, st.s32, st.init], [oe.rm_rm, oe.imm, oe.none])
];

enum Mneumonic
{
    FAILSAFE,

    // PSUEDO_MNEUMONICS
    db, dw, dd, dq,

    // ACTUAL_MNEUMONICS
    aaa,
    aad,
    aam,
    aas,
    adc,
    adcx,
    add,
    addpd,
    addps,
    addsd,
    addss,
    addsubpd,
    addsubps,
    adox,
    aesdec,
    aesdeclast,
    aesenc,
    aesenclast,
    aesimc,
    aeskeygenassist,
    and,
    andn,
    andnpd,
    andnps,
    andpd,
    andps,
    arpl,
    bexter,
    blendpd,
    blendps,
    blendvpd,
    blendvps,
    blsi,
    blsmsk,
    blsr,
    bndcl,
    bndcn,
    bndcu,
    bndldx,
    bndmk,
    bndmov,
    bndstx,
    bound,
    bsf,
    bsr,
    bswap,
    bt,
    btc,
    btr,
    bts,
    bzhi,
    call,
    cbw,
    cdq,
    cdqe,
    clac,
    clc,
    cld,
    cldemote,
    clflush,
    clflushopt,
    cli,
    clts,
    clwb,
    cmc,
    cmova,
    cmovae,
    cmovb,
    cmovbe,
    cmovc,
    cmove,
    cmovg,
    cmovge,
    cmovl,
    cmovle,
    cmovna,
    cmovnae,
    cmovnb,
    cmovnbe,
    cmovnc,
    cmovne,
    comvng,
    cmovnge,
    cmovnl,
    cmovnle,
    cmovno,
    cmovnp,
    cmovns,
    cmovnz,
    cmovo,
    cmovp,
    cmovpe,
    cmovpo,
    cmovs,
    cmovz,
    cmp,
    cmppd,
    cmpps,
    cmps,
    cmpsb,
    cmpsd,
    cmpsq,
    cmpsw,
    cmpss,
    cmpxchg,
    cmpxchg16b,
    cmpxchg8b,
    cmoisd,
    comiss,
    cpuid,
    cqo,
    crc32,
    cvtdq2pd,
    cvtdq2ps,
    cvtpd2dq,
    cvtpd2pi,
    cvtpd2ps,
    cvtpi2pd,
    cvtpi2ps,
    cvtps2dq,
    cvtps2pd,
    cvtps2pi,
    cvtsd2si,
    cvtsd2ss,
    cvtsi2sd,
    cvtsi2ss,
    cvtss2sd,
    cvtss2si,
    cvttpd2dq,
    cvttpd2pi,
    cvttps2dq,
    cvttsd2si,
    cvttss2si,
    cwd,
    cwde,
    daa,
    das,
    dec,
    div,
    divpd,
    divps,
    divsd,
    divss,
    dppd,
    dpps,
    emms,
    enter,
    extractps,
    f2xm1,
    fabs,
    fadd,
    faddp,
    fbld,
    fbstp,
    fchs,
    fclex,
    fcmova,
    fcmovae,
    fcmovb,
    fcmovbe,
    fcmovc,
    fcmove,
    fcmovg,
    fcmovge,
    fcmovl,
    fcmovle,
    fcmovna,
    fcmovnae,
    fcmovnb,
    fcmovnbe,
    fcmovnc,
    fcmovne,
    fcomvng,
    fcmovnge,
    fcmovnl,
    fcmovnle,
    fcmovno,
    fcmovnp,
    fcmovns,
    fcmovnz,
    fcmovo,
    fcmovp,
    fcmovpe,
    fcmovpo,
    fcmovs,
    fcmovz,
    fcom,
    fcomip,
    fcomp,
    fcompp,
    fcos,
    fcdecstp,
    fdiv,
    fdivp,
    fdivr,
    fdivrp,
    ffree,
    fiadd,
    ficom,
    ficomp,
    fidiv,
    fidivr,
    fild,
    fimul,
    fincstp,
    finit,
    fist,
    fistp,
    fisttp,
    fisub,
    fisubr,
    fld,
    fld1,
    fldcw,
    fldenv,
    fldle2e,
    fldl2t,
    fldlg2,
    fldln2,
    fldpi,
    fldz,
    fmul,
    fmulp,
    fnclex,
    fninit,
    fnop,
    fnsave,
    fnstcw,
    fnstenv,
    fnstsw,
    fpatan,
    fprem,
    fprem1,
    fptan,
    frndint,
    frstor,
    fsave,
    fscale,
    fsin,
    fsincos,
    fsqrt,
    fst,
    fstcw,
    fstenv,
    fstp,
    fstsw,
    fsub,
    fsubp,
    fsubr,
    fsubrp,
    ftst,
    fucom,
    fucomi,
    fucomip,
    fucmp,
    fucompp,
    fwait,
    fxam,
    fxch,
    fxrstor,
    fxsave,
    fxtract,
    fyl2x,
    fyl2xp1,
    gf2p8affineinvqb,
    gf2p8affineqb,
    gf2p8mulb,
    haddpd,
    haddps,
    hlt,
    hsubpd,
    hsubps,
    idiv,
    imul,
    in_,
    inc,
    ins,
    insb,
    insd,
    insertps,
    insw,
    int_,
    int1,
    int3,
    into,
    invd,
    invlpg,
    invpcid,
    iret,
    iretd,
    jmp,
    ja,
    jae,
    jb,
    jbe,
    jc,
    je,
    jg,
    jge,
    jl,
    jle,
    jna,
    jnae,
    jnb,
    jnbe,
    jnc,
    jne,
    jng,
    jnge,
    jnl,
    jnle,
    jno,
    jnp,
    jns,
    jnz,
    jo,
    jp,
    jpe,
    jpo,
    js,
    jz,
    kaddb,
    kaddd,
    kaddq,
    kaddw,
    kandb,
    kandnb,
    kandnq,
    kandnw,
    kandq,
    kandw,
    kmovb,
    kmovd,
    kmovq,
    kmovw,
    knotb,
    knotd,
    knotq,
    knotw,
    korb,
    kord,
    korq,
    kortestb,
    kortestd,
    kortestq,
    kortestw,
    korw,
    kshiftlb,
    kshiftld,
    kshiftlq,
    kshiftlw,
    kshiftrb,
    kshiftrd,
    kshiftrq,
    kshiftrw,
    ktestb,
    ktestd,
    ktestq,
    ktestw,
    kunpckbw,
    kunpckdq,
    kunpckwd,
    kxnorb,
    kxnord,
    kxnorq,
    kxnorw,
    kxorb,
    kxord,
    kxorq,
    kxorw,
    lahf,
    lar,
    lddqu,
    ldmxcsr,
    lds,
    lea,
    leave,
    les,
    lfence,
    lfs,
    lgdt,
    lgs,
    lidt,
    lldt,
    lmsw,
    lock,
    lods,
    lodsb,
    lodsd,
    lodsq,
    lodsw,
    loop,
    loope,
    loopne,
    lsl,
    lss,
    ltr,
    lzcnt,
    maskmovdqu,
    maskmovq,
    maxpd,
    mpaxps,
    maxsd,
    maxss,
    mfence,
    minpd,
    minps,
    minsd,
    minss,
    monitor,
    mov,
    movapd,
    movaps,
    movbe,
    movd,
    movddup,
    movdir64,
    mivdiri,
    movdq2q,
    movdqa,
    movdqu,
    movhlps,
    movhpd,
    movhps,
    movlhps,
    movlpd,
    movlps,
    movmskpd,
    movmskps,
    movntdq,
    movntdqqa,
    movnti,
    movntpd,
    movntps,
    monntq,
    movq,
    movq2dq,
    movs,
    movsb,
    movsd,
    movshdup,
    movsldup,
    movsq,
    movss,
    movsw,
    movsx,
    movsxd,
    movupd,
    movups,
    movzx,
    mpsadbw,
    mul,
    mulpd,
    mulps,
    mulsd,
    mulss,
    mulx,
    mwait,
    neg,
    nop,
    not,
    or,
    orpd,
    orps,
    out_,
    outs,
    outsb,
    outsd,
    outsw,
    pabsb,
    pabsd,
    pabsq,
    pabsw,
    packssdw,
    packsswb,
    packusdw,
    packuswb,
    paddb,
    paddd,
    paddq,
    paddsb,
    paddsw,
    paddusb,
    paddusw,
    paddw,
    palignr,
    pand,
    pandn,
    pause,
    pavgb,
    pavgw,
    pblendvb,
    pblendw,
    pclmulqdq,
    pcmpeqb,
    pcmpeqd,
    pcmpeqq,
    pcmpeqw,
    pcmpestri,
    pcmpstrm,
    pcmpgtb,
    pcmpgtd,
    pcmpgtq,
    pcmpgtw,
    mpcmpistri,
    pcmpistrm,
    pdep,
    mpext,
    pextrb,
    pextrd,
    pextrq,
    pextrw,
    phaddd,
    phaddsw,
    phaddw,
    phimposuw,
    phsubd,
    phsubsw,
    phsubw,
    pinsrb,
    pinsrd,
    pinsrq,
    pinsrw,
    pmaddubsw,
    pmaddwd,
    pmaxsb,
    pmaxsd,
    pmaxsq,
    pmaxsw,
    pmaxub,
    pmaxud,
    pmaxuq,
    pmaxuw,
    
    ptest,
    ptwrite,
    punpckhbw,
    punpckhdq,
    punpckhqdq,
    puncpkhwd,
    punpcklbw,
    punpckldq,
    punpcklqdq,
    punpcklwd,
    push,
    pusha,
    pushad,
    pushf,
    pushfd,
    pushfq,
    pxor,
    rcl,
    rcpps,
    rcpss,
    rcr,
    rdfsbase,
    rdgsbase,
    rdmsr,
    rdpid,
    rdpkru,
    rdpmc,
    rdrand,
    rdseed,
    rdtsc,
    rdtscp,
    rep,
    repe,
    repne,
    repnz,
    repz,
    ret,
    rol,
    ror,
    rorx,
    roundpd,
    roundps,
    roundsd,
    roundss,
    rsm,
    rsqrtps,
    rsqrtss,
    sahf,
    sal,
    sar,
    sarx,
    sbb,
    scas,
    scasb,
    scasd,
    scasw,
    sfence,
    sgdt,
    sha1msg1,
    sha1msg2,
    sha1nexte,
    sha1rnds4,
    sha256ms1,
    sha256msg2,
    sha256rnds2,
    shl,
    shld,
    shlx,
    shr,
    shrd,
    shrx,
    shufpd,
    shufps,
    sidt,
    sldt,
    smsw,
    sqrtpd,
    sqrtps,
    sqrtsd,
    sqrtss,
    stac,
    stc,
    std,
    sti,
    stmxcsr,
    stos,
    stosb,
    stosd,
    stosq,
    stosw,
    str,
    sub,
    subpd,
    subps,
    subsd,
    subss,
    swapgs,
    syscall,
    sysenter,
    sysexit,
    sysret,
    test,
    tpause,
    tzcnt,
    ucomisd,
    ucomiss,
    ud,
    umonitor,
    unwait,
    unpckhpd,
    unpckhps,
    unpcklpd,
    unpcklps,
    valignd,
    valignq,
    
    wait,
    wbinvd,
    wrfsbase,
    wrgsbase,
    wrmsr,
    wrpkru,
    xabort,
    xacquire,
    xadd,
    xbegin,
    xchg,
    xend,
    xgetbv,
    xlat,
    xlatb,
    xor,
    xorpd,
    xorps,
    xrelease,
    xrstor,
    xrstors,
    xsave,
    xsavec,
    xsaveopt,
    xsaves,
    xsetbv,
    xtest
}